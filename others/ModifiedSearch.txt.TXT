package dev.rohit;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Trie {
    private char val;
    private List<Trie> children = new ArrayList<>();
    private boolean isLeaf = false;

    public Trie(char val) {
        this.val = val;
    }

    public void insertWord(Trie root, String word) {
        for (int i = 0; i < word.length(); ++i) {
            char letter = word.charAt(i);
            boolean found = false;
            for (int j = 0; j < root.children.size(); ++j) {
                Trie child = root.children.get(j);
                if (child.val == letter) {
                    found = true;
                    root = child;
                    if (i == word.length() - 1) {
                        root.isLeaf = true;
                    }
                    break;
                }
            }
            if (!found) {
                Trie newNode = new Trie(letter);
                root.children.add(newNode);
                root = newNode;
                if (i == word.length() - 1) {
                    root.isLeaf = true;
                }
            }
        }
    }


    public boolean find(Trie root, String word) {
        int n = word.length();
        for (int i = 0; i < n; ++i) {
            char letter = word.charAt(i);
            boolean found = false;
            for (int j = 0; j < root.children.size(); ++j) {
                Trie child = root.children.get(j);
                if (letter == child.val) {
                    root = child;
                    found = true;
                    break;
                }
            }
            if (!found) {
                for (int j = 0; j < root.children.size(); ++j) {
                    Trie child = root.children.get(j);
                    boolean possible = findAfterModification(child, word, i + 1);
                    if (possible)
                        return true;
                }
                return false;
            }
        }
        return false;
    }

    public boolean findAfterModification(Trie root, String word, int index) {
        int n = word.length();
        for (int i = index; i < n; ++i) {
            char letter = word.charAt(i);
            boolean found = false;
            for (int j = 0; j < root.children.size(); ++j) {
                Trie child = root.children.get(j);
                if (letter == child.val) {
                    root = child;
                    found = true;
                    break;
                }
            }
            if (!found) {
                return false;
            }
        }
        return root.isLeaf;
    }
}

public class Main {

    public static void main(String[] args) {
        Scanner kb = new Scanner(System.in);
        int n = kb.nextInt();
        int m = kb.nextInt();
        Trie root = new Trie('@');
        List<String> A = new ArrayList<>();
        List<String> B = new ArrayList<>();
        for (int i = 0; i < n; ++i) {
            String val = kb.next();
            root.insertWord(root, val);
        }
        String ans = "";
        for (int i = 0; i < m; ++i) {
            String val = kb.next();
            boolean possible = root.find(root, val);
            ans += possible == true ? "1" : "0";
        }
        System.out.println(ans);
    }
}
