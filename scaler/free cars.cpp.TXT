#include <iostream>
#include <unordered_map>
#include <map>
#include<vector>
#include<numeric>
#include <algorithm>
#include<list>
#include<queue>
#include <unordered_set>
#include <cmath>

#define endl "\n"
using namespace std;

int solve(vector<int> A, vector<int> B) {
    int n = A.size();
    int mod = pow(10,9)+7;
    vector<pair<int, int> > time_sort(n);
    for (int i = 0; i < n; ++i) {
        time_sort[i] = {A[i] - 1, B[i]};
    }
    sort(time_sort.begin(), time_sort.end());
//    for (int i = 0; i < n; ++i) {
//        cout << time_sort[i].first << " " << time_sort[i].second << endl;
//    }
    priority_queue<int, vector<int>, greater<int> > min_heap;
    int ans = 0;
    int vacant_spaces = 0;
    for (int i = 0; i < n; ++i) {
        pair<int, int> val = time_sort[i];
        if (i == 0) {
            vacant_spaces = val.first + 1;
        } else {
            if (time_sort[i - 1].first != time_sort[i].first) {
                vacant_spaces += time_sort[i].first - time_sort[i - 1].first ;
            }
        }
        if (vacant_spaces) {
            --vacant_spaces;
            min_heap.push(val.second);
            ans = (ans + val.second)%mod;
        } else {
            int popped_element = min_heap.top();
            if (popped_element < val.second) {
                min_heap.pop();
                min_heap.push(val.second);
                ans =(ans + (val.second - popped_element))%mod;
            }
        }
    }
    return ans;
}

int main() {
    int n;
    cin >> n;
    vector<int> A(n), B(n);
    for (int i = 0; i < n; ++i) {
        cin >> A[i];
    }
    for (int i = 0; i < n; ++i) {
        cin >> B[i];
    }
    cout << solve(A, B);
}

