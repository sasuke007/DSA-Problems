Little Ponny and Unstable permutation

Problem Description

A permutation P is called unstable if it keeps changing every second based on the rule below.

    Every element of the permutation is changing every second independently following a rule, i.e., after one second every P[i] becomes P[P[i]]

Given a permutation, find the minimum time after which it will become stable. If it will never become stable, return -1.

For example, given N = 3 and P[3,2,1], In one second it will become [P[P[3]], P[P[2]], P[P[1]] ] = [1, 2, 3].
The permutation [1,2,3] is stable as it will not change further after applying the same rule again.



Problem Constraints

1 <= |A| <= 200000

1 <= A[i] <= |A|



Input Format

The first and only argument of the input is the array A


Output Format

Your function should return a single integer -the minimum time after which it will become stable otherwise -1.


Example Input

Input 1:

 A: [1, 3, 2, 5, 6, 7, 4]

Input 2:

 A: [2, 3, 1, 5, 6, 7, 4]



Example Output

Output 1:

 2

Output 2:

 -1



Example Explanation

Explanation 1:

 Ther array will become stable after two seconds:


     After one second, the permutation will become  [1, 2, 3, 6, 7, 4, 5] 
    .
     After two seconds, the permutation will become [1, 2, 3, 4, 5, 6, 7] 
    .

Explanation 2:

 The permutation never becomes stable, thus the answer is -1.


**************************************************************************************
void decrese(vector<int> &A){
    int n=A.size();
    for(int i=0;i<n;++i){
        A[i]--;
    }
}
int cycle_length(vector<int> &A,vector<bool> &visited,int index){
    int n=A.size();
    int len=0;
    while(visited[index]==0){
        visited[index]=1;
        ++len;
        index=A[index];
    }
    return len;
}
int Solution::solve(vector<int> &A) {
    int n=A.size();
    decrese(A);
    vector<bool> visited(n,0);
    int max_len=-1;
    for(int i=0;i<n;++i){
        if(!visited[i]){
            int len=cycle_length(A,visited,i);
            double log_len=log2(len);
            if(log_len-int(log_len)!=0){
                return -1;   
            }
            max_len=max(max_len,len);
        }
    }
    return int(log2(max_len));
}


