Maximum Subtree

Problem Description

You are given a tree of A nodes having A-1 edges. Each node is numbered from 1 to A where 1 is the root of the tree.

You are given Q queries. In each query, you will be given a unique integer j. You are required to remove the j'th numbered edge from the tree.

This operation will divide a tree into two different trees.

For each query, once you perform the remove operation, you are asked to tell the maximum size among all the sizes of the trees present till that query.

NOTE:

1) Once an edge is removed, it will be considered removed for all the further queries.

2) It is guaranteed that each edge will be pointing to exactly two different nodes of the tree.

3) Edges are numbered from 1 to A-1. Please read the input format for more clarification.



Problem Constraints

2 <= A <= 105

1 <= B[i], C[i] <= A

1 <= D[i], Q <= A-1



Input Format

The first argument is an integer A denoting the number of nodes.

The second and third arguments are the integer arrays B and C where for each i (0 <= i < A-1), i denotes the (i+1)th edge and B[i] and C[i] are the nodes connected by it.

The fourth argument is an integer array D of distinct elements where D[i] denotes the number of the edge to be removed for the ith query.



Output Format

Return an array of answers.


Example Input

Input 1:

 A = 5
 B = [1, 3, 3, 5]
 C = [3, 2, 4, 1]
 D = [1, 3]

Input 2:

 A = 2
 B = [1]
 C = [2]
 D = [1]



Example Output

Output 1:

 [3, 2]

Output 2:

 [1]



Example Explanation

Explanation 1:

 Initial tree:
        1
       / \            
      3   5
     /\
    2  4

    Query 1: 
    Remove edge number 1: 1-3
        1
      /  \ 
      3   5
     /\
    2  4

    Obtained Trees:-
        Node 2, Node 3, Node 4 => Size 3
        Node 1, Node 5 => Size 2

    Max Size = 3

    Query 2: 
    Remove edge number 3: 3-4
         1
       /  \ 
      3   5
     / \
    2  4
    Obtained Trees:-
        Node 2, Node 3 => Size = 2
        Node 4 => Size = 1
        Node 1, Node 5 => Size = 2

    Max Size = 2


Explanation 2:

 2 trees of size 1 are left.



**************************************************************************************


void decrese(vector<int> &input){
    int n=input.size();
    for(int i=0;i<n;++i)
        input[i]-=1;
}
int find(vector<int> &dsu,int node){
    if(dsu[node]<0)
        return node;
    int parent=find(dsu,dsu[node]);
    dsu[node]=parent;
    return parent;
}
int make_union(vector<int> &dsu,int x,int y){
    int parent_x=find(dsu,x);
    int parent_y=find(dsu,y);
    if(parent_x==parent_y)
        return -1;
    int subtree=-1;
    if(dsu[parent_x]<=dsu[parent_y]){
        dsu[parent_x]+=dsu[parent_y];
        dsu[parent_y]=parent_x;
        subtree=abs(dsu[parent_x]);
    }
    else{
        dsu[parent_y]+=dsu[parent_x];
        dsu[parent_x]=parent_y;
        subtree=abs(dsu[parent_y]);
    }
    return subtree;
}
void display(vector<int> &arr){
    for(int i:arr)
        cout<<i<<" ";
    cout<<endl;
}
vector<int> Solution::solve(int A, vector<int> &B, vector<int> &C, vector<int> &D) {
    vector<int> dsu(A,-1);
    int max_subtree=1;
    decrese(B);decrese(C);decrese(D);
    //display(dsu);
    unordered_set<int> removed_edges(D.begin(),D.end());
    for(int i=0;i<B.size();++i){
        if(removed_edges.find(i)==removed_edges.end()){
            int u=B[i];
            int v=C[i];
            int subtree=make_union(dsu,u,v);
            max_subtree=max(max_subtree,subtree);
            //display(dsu);
        }
    }
    vector<int> ans;
    for(int i=D.size()-1;i>=0;--i){
        ans.push_back(max_subtree);
        int edge=D[i];
        int u=B[edge];
        int v=C[edge];
        int subtree=make_union(dsu,u,v);
        max_subtree=max(max_subtree,subtree);
        //display(dsu);
    }
    reverse(ans.begin(),ans.end());
    return ans;
}
