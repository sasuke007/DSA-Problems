Special cities

Problem Description

There are N cities numbered 1 to N and ith city has A[i] beauty.

Cities are connected by N-1 roads of certain length.
2-D array B of size (N-1) * 3 denotes the roads where B[i][0] and B[i][1] the cities between there is road and B[i][2] denotes the length of the road.

A city u is called special if there exist a city v in the subtree of u such that Distance(u,v) > A[v].

Distance(u,v) is the sum of length of roads on the path from u to v.

Find and return the number of special cities.

NOTE: Consider the above tree rooted at city 1.



Problem Constraints

1 <= N <= 105

1 <= A[i], B[i][2] <= 107

1 <= B[i][0], B[i][1] <= N



Input Format

First argument is an integer array A of size N denoting the beauty of city.
Second argument is a 2-D array B of size (N-1) * 3 denoting roads.


Output Format
Return an integer denoting the number of special cities.


Example Input

A = [2,4,3,2]
B = [ [1, 2, 3]
      [1, 4, 2]
      [2, 3, 1] ]



Example Output

1



Example Explanation

Only the city 1 is special. The city 1 has a city 3 in the subtree.
The beauty of city 3 is 3 and the Distance(1, 3) is 4.



**************************************************************************************

int compute_special_cities(vector<vector<pair<int,int> > > &tree,vector<int> &beauties,int root,int &special_cities){
    int beauty=beauties[root];
    int min_distance=beauty;
    for(int children=0;children<tree[root].size();++children){
        int child=tree[root][children].first;
        int road_length=tree[root][children].second;
        int required_distance=compute_special_cities(tree,beauties,child,special_cities);
        min_distance=min(min_distance,required_distance-road_length);
        //min_distance=min(min_distance,beauties[child]-road_length);
    }
    if(min_distance<0)
        ++special_cities;
    return min_distance;
}
int Solution::solve(vector<int> &A, vector<vector<int> > &B) {
    int no_cities=A.size();
    vector<vector<pair<int,int> > > tree(no_cities);
    for(int i=0;i<no_cities-1;++i){
        int u=B[i][0]-1;
        int v=B[i][1]-1;
        int l=B[i][2];
        tree[u].push_back({v,l});
    }
    int special_cities=0;
    compute_special_cities(tree,A,0,special_cities);
    return special_cities;
}
