Shorten the Longest Permutation Cycle

Problem Statement :
Given a permutation P of the first N positive integers, the goal is to change at most 2 elements of the permutation, to get a new permutation S, in such a way that: S is the permutation of the first N positive integers and the longest cycle in S is shorter than the longest cycle in P.
You have to output the size of the longest cycle in S or print -1 if such an S does not exist.

A permutation of first N positive integers is a random arrangement of first N positive integers.
Example :
N: 5
P: 5 4 2 1 3
A cycle in a permutation is a subset of a permutation whose elements trade places with one another.
Example:
N = 4
P: 3 1 2 4
3, 1, 2 are in a cycle. The length of this cycle is 3.
Explanation: 3 is at position 1, 2 is at position 3 and 1 is at position 2. Therefore 3->2->1->3

Input :
The first line contains T, the number of test cases
The first line of each test case contains N
The second line of each test case contains N space separated integers denoting P the permutation of first N positive integers.

Output :
For each test case out a single line with one integer denoting the answer

Constraints:
1 <= T <= 100
2 <= N <= 100000



**************************************************************************************


#include<iostream>
#include<bits/stdc++.h>
using namespace std;
int solve(vector<int> &p,vector<int> &visited,int index){
    int count=0;
    while(!visited[index]){
        visited[index]=1;
        ++count;
        index=p[index];
    }
    return count;
}
int main()  {
    int tc;
    cin>>tc;
    while(tc--){
        int n;
        cin>>n;
        vector<int> p(n),visited(n,0);
        for(int i=0;i<n;++i){
            int val;
            cin>>val;
            val--;
            p[i]=val;
        }
        int max_len=0,count=0,index=-1,second_best=0;
        for(int i=0;i<n;++i){
            if(!visited[i]){
                int len=solve(p,visited,i);
                if(len>max_len){
                    second_best=max_len;
                    max_len=len;
                    count=1;
                    index=i;
                }
                else if(len==max_len){
                    ++count;
                }
                else{
                    if(len>second_best){
                        second_best=len;
                    }
                }
            }
        }
        if(max_len==1 or count>1){
            cout<<-1<<endl;
        }
        else{
            cout<<max(second_best,max_len-1)<<endl;
        }
    }
    return 0;
}