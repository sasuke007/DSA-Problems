POWER ARRAYS

Given an array of integers A of size N.

An array is called POWER ARRAY if floor((maximum of array)/2) >= all other elements of array

Example:- A = [5, 3, 6, 13] is a POWER ARRAY because floor((13/2)) >= all other elements of the array.

Calculate how many subarrays of A are POWER ARRAYS.

NOTE : Single element can never be a power array.
Input Format

The first argument given is the integer array A.

Output Format

Calculate how many subarrays of A are POWER ARRAYS.

Constraints

1 <= N <= 100000
1 <= A[i] <= 100000

For Example

Input 1:
    A = [1, 2, 3, 4, 5 ]
Output 1:
    1
Explaination 1:
    Only subarray which is also a POWER ARRAY is [1, 2]

Input 2:
    A = [64, 32, 16, 8, 4]
Output 2:
    10
Explanation 1:
    All subarrays of size greater than 1 are POWER ARRAYs. 




**************************************************************************************


vector<int> smlr_elements(vector<int> &A){
    int n=A.size();
    stack<pair<int,int> > store;
    vector<int> ans(n,0);
    for(int i=0;i<n;++i){
        int val=A[i];
        if(store.empty()){
            store.push({val,i});
        }
        else{
            while(!store.empty() and store.top().first<=val/2){
                pair<int,int> elem=store.top();
                store.pop();
                int index=elem.second;
                ans[i]+=1+ans[index];
            }
            store.push({val,i});
        }
    }
    return ans;
}
int Solution::solve(vector<int> &A) {
    int n=A.size();
    vector<int> left=smlr_elements(A);
    reverse(A.begin(),A.end());
    vector<int> right=smlr_elements(A);
    reverse(right.begin(),right.end());
    int power_subarrays=0;
    for(int i=0;i<n;++i){
        power_subarrays+=left[i]+right[i]+(left[i]*right[i]);
    }
    return power_subarrays;
}
