Favourite Teacher

Problem Description

There are N teachers and N students both numbered from 1 to N. We know that each student has a preference for teachers. We have a matrix A. A[i][j] is 1 if ith student likes teacher j. It is zero otherwise.

We want to find the number of ways to assign a teacher to each student so that each student only gets one of his preferred teachers and each teacher is allowed to only one student. Since the answer can be large return it modulo 109 + 7.



Problem Constraints

1 <= N <= 20

0 <= A[i][j] <= 1



Input Format

First line contains a 2-D matrix A of size NxN.


Output Format

Return the number of ways to allot teachers to students.


Example Input

Input 1:

  A = [
       [0, 1, 1]
       [1, 0, 1]
       [1, 1, 1]
      ]

Input 2:

  A = [
       [0]
      ]



Example Output

Output 1:

  3

Output 2:

  0



Example Explanation

Explanation 1:

  There are 3 ways to form pairs (i,j) denotes pair of i-th student and j-th teacher.
  (1,2), (2,1), (3,3)
  (1,2), (2,3), (3,1)
  (1,3), (2,1), (3,2)

Explanation 2:

  We can't form a pair.



************************************************************************************


int assign_teachers(vector<vector<int> > &A,int row,int mask,unordered_map<int,int> &dp){
    int n=A.size();
    if(row==n)
        return 1;
    if(dp.find(mask)!=dp.end()){
        return dp[mask];
    }
    int total_ways=0;
    int mod=1e9+7;
    for(int i=0;i<n;++i){
        if(A[row][i]==1 and ((mask>>i)&1)==0){
            total_ways=(total_ways+assign_teachers(A,row+1,mask|(1<<i),dp))%mod;
        }
    }
    dp[mask]=total_ways;
    return total_ways;
}
int Solution::solve(vector<vector<int> > &A) {
    int n=A.size();
    int mod=1e9+7;
    unordered_map<int,int> dp;
    return assign_teachers(A,0,0,dp);
}
