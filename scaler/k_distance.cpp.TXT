K DISTANCE

Problem Description

Given a balanced binary tree of integers and an integer B, count the number of pairs (a, b) where:

    a is ancestor of b.
    Absolute difference between value of node a and value of node b <= B



Problem Constraints

1 <= Number of nodes in binary tree <= 105
0 <= node values <= 105
1 <= B <= 105


Input Format

First argument is the root of the binary tree.
Second argument is an integer B.


Output Format

Return an integer denoting the number of pairs satisfying the condition.


Example Input

Input 1:

        1
      /   \
     2    3
    / \  / \
   4   5 6  7
  /
 8
 B = 1

Input 2:

    1
  /   \
 2     3
  \
   4
 B = 2



Example Output

Output 1:

 1

Output 2:

 3



Example Explanation

Explanation 1:

 Only possible pair is (1, 2).

Explanation 2:

 3 possible pair exists: {(1, 2), (2, 4), (1, 3)}.


*************************************************************************************

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
int dfs(TreeNode *root,vector<int> &ancestors,int k){
    if(root==NULL)
        return 0;
    int k_distance=0;
    int val=root->val;
    for(int i=0;i<ancestors.size();++i){
        if(abs(val-ancestors[i])<=k){
            ++k_distance;
        }
    }
    ancestors.push_back(val);
    k_distance+=dfs(root->left,ancestors,k);
    k_distance+=dfs(root->right,ancestors,k);
    ancestors.pop_back();
    return k_distance;
}
int Solution::solve(TreeNode* root, int k) {
    vector<int> ancestors;
    int k_distance=dfs(root,ancestors,k);
    return k_distance;
}
