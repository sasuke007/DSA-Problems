Element Selection

Problem Description

Given a matrix A of size N*N. You have to choose N elements from the matrix such that their sum is maximum but there is a catch.

You have to choose exactly one element from every row and every column. Return the maximum possible sum you can achieve by choosing N elements with the given condition.



Problem Constraints

1 <= N <= 18
-108 <= A[i][j] <= 108


Input Format

First and only argument is an integer matrix A.


Output Format

Return an integer denoting the maximum possible sum.


Example Input

Input 1:

 A = [ [5, 50], 
       [100, 10] ]

Input 2:

A = [ [1, 1],
      [10, 20] ]



Example Output

Output 1:

 150

Output 2:

 21



Example Explanation

Explanation 1:

 Choose 50 from 1st row and 100 from 2nd row.

Explanation 2:

 Choose first 1 from 1st row and 20 from 2nd row.



************************************************************************************


int element_selection(vector<vector<int> >&A,int row,int mask,unordered_map<int,int> &dp){
    int n=A.size();
    if(row==n)
        return 0;
    if(dp.find(mask)!=dp.end()){
        return dp[mask];
    }
    int inf=1e9+7;
    int max_sum=-inf;
    for(int i=0;i<n;++i){
        if(((mask>>i)&1)==0){
            int val=element_selection(A,row+1,mask|(1<<i),dp);
            max_sum=max(max_sum,val+A[row][i]);
        }
    }
    dp[mask]=max_sum;
    return max_sum;
}
int Solution::solve(vector<vector<int> > &A) {
    unordered_map<int,int> dp;
    return element_selection(A,0,0,dp);
}

