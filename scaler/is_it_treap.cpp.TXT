Is it treap?

Problem Description

You are given an empty array. Process Q queries of the following problems:

    1 X 0: insert X at the back of the array
    2 A B: find the count of numbers in the range [A, B] in the array.

Return an integer array denoting the answer of each query.



Problem Constraints

    1 <= Q <= 2*105
    1 <= X <= 109
    1 <= A <= B <= 109



Input Format

First and only argument of input contains a Q x 3 integer matrix, each row denoting a query.


Output Format

Return an integer array denoting the answer of each query.


Example Input

Input 1:

   A = [
        [1, 2, 0]
        [1, 5, 0] 
        [2, 1, 10] 
        [1, 5, 0] 
        [2, 2, 5]
       ]

Input 2:

   A = [
        [2, 1, 2]
        [1, 2, 0]
        [2, 3, 4]
        [1, 4, 0]
       ]



Example Output

Output 1:

    [2, 3]

Output 2:

    [0, 0]



Example Explanation

Explanation 1:

    [1, 2, 0]: insert 2 in array, array becomes [2]
    [1, 5, 0]: insert 5 in array, array becomes [2, 5]
    [2, 1, 10]: [2,5] both lie in [1, 10], so return 2
    [1, 5, 0]: insert 5 in array, array becomes [2, 5, 5]
    [2, 2, 5]: all 3 elements lie in [2,5], so return 3




**************************************************************************************

#include <ext/pb_ds/assoc_container.hpp> // Common file 
#include <ext/pb_ds/tree_policy.hpp> 
#include <functional> // for less 
//#include <iostream> 
using namespace __gnu_pbds; 
//using namespace std; 
  
// a new data structure defined. Please refer below 
// GNU link : https://goo.gl/WVDL6g 
typedef tree<int, null_type, less_equal<int>, rb_tree_tag, 
             tree_order_statistics_node_update> 
    ordered_set; 
vector<int> Solution::solve(vector<vector<int> > &A) {
    vector<int> ans;
    ordered_set store;
    for(int i=0;i<A.size();++i){
        int type=A[i][0];
        if(type==1){
            int val=A[i][1];
            store.insert(val);
        }
        else{
            int x=A[i][1];
            int y=A[i][2];
            int less_than_y=store.order_of_key(y+1);
            int less_than_x=store.order_of_key(x);
            //cout<<less_than_y<<" "<<less_than_x<<endl;
            ans.push_back(less_than_y-less_than_x);
        }
    }
    return ans;
}
