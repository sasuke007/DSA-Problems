

You are given an array of N integers, A1, A2 ,…, AN and an integer K. Return the of count of distinct numbers in all windows of size K.

Formally, return an array of size N-K+1 where i’th element in this array contains number of distinct elements in sequence Ai, Ai+1 ,…, Ai+k-1.

Note:

 If K > N, return empty array.
 A[i] is a signed integer

For example,

A=[1, 2, 1, 3, 4, 3] and K = 3

All windows of size K are

[1, 2, 1]
[2, 1, 3]
[1, 3, 4]
[3, 4, 3]

So,

 we return an array [2, 3, 3, 2].

**************************************************************************************

void del(int element,int &distinct_elements,unordered_map<int,int> &store){
    store[element]--;
    if(store[element]==0){
        --distinct_elements;
    }
}
void insert(int element,int &distinct_elements,unordered_map<int,int> &store){
    store[element]++;
    if(store[element]==1){
        distinct_elements++;
    }
}
vector<int> Solution::dNums(vector<int> &nums, int window_size) {
    int n=nums.size();
    vector<int> ans;
    if(window_size>n){
        return ans;
    }
    unordered_map<int,int> store;
    int distinct_elements=0;
    for(int i=0;i<window_size;++i){
        int num=nums[i];
        insert(num,distinct_elements,store);
    }
    int i=0,j=window_size-1;
    while(j<n-1){
        ans.push_back(distinct_elements);
        del(nums[i],distinct_elements,store);
        ++i;
        ++j;
        insert(nums[j],distinct_elements,store);
    }
    ans.push_back(distinct_elements);
    return ans;
}
