
BST Iterator

    Asked in:  
    Apple
    Amazon
    Facebook

Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.

The first call to next() will return the smallest number in BST. Calling next() again will return the next smallest number in the BST, and so on.

    Note: next() and hasNext() should run in average O(1) time and uses O(h) memory, where h is the height of the tree.
    Try to optimize the additional space complexity apart from the amortized time complexity. 



**************************************************************************************



/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 stack<TreeNode *> store;
void push_nodes(TreeNode *node){
    while(node){
        store.push(node);
        node=node->left;
    }
}
BSTIterator::BSTIterator(TreeNode *root) {
    push_nodes(root);
}

/** @return whether we have a next smallest number */
bool BSTIterator::hasNext() {
    return !store.empty();
}

/** @return the next smallest number */
int BSTIterator::next() {
    TreeNode *node=store.top();
    store.pop();
    if(node->right){
        push_nodes(node->right);
    }
    return node->val;
}

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = BSTIterator(root);
 * while (i.hasNext()) cout << i.next();
 */
